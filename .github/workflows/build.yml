name: Build

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: 'Windows 64'
            compiler: 'msvc'
            platform: 'x64'
            args: '-win-mt'
            output: 'libtesseract64.dll'

          - os: ubuntu-latest
            name: 'Ubuntu 64'
            compiler: 'gnu'
            platform: 'x64'
            args: ''
            output: 'libtesseract64.so'

    steps:
      - uses: actions/checkout@v2.3.2
      - uses: egorpugin/sw-action@master
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Cache
        id: cache
        uses: actions/cache@v2.1.1
        with:
          path: storage
          key: ${{ matrix.config.name }}${{ matrix.config.platform }}

      - name: Build Tesseract
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ./sw build ${{ matrix.config.args }} -platform ${{ matrix.config.platform }} -compiler=${{ matrix.config.compiler }} -storage-dir=storage -static -static-dependencies -config r org.sw.demo.google.tesseract.tesseract-master

      - name: Extract Headers & Libraries
        shell: bash
        run: |
          mkdir -p libs
          find "storage/pkg/" -name "*.a" -exec cp "{}" "libs" \;
          find "storage/pkg/" -name "*.lib" -exec cp "{}" "libs" \;
          
          mkdir -p leptonica
          leptonica=$(find "storage/pkg/" -name "allheaders.h" -printf '%h/\n')
          find "$leptonica" -name "*.h*" -exec cp "{}" leptonica/ \;
          find "storage/pkg/" -name "*endianness.h*" -exec cp "{}" leptonica/ \;
          
          mkdir -p tesseract
          tesseract=$(find "storage/pkg/" -name "baseapi.h" -printf '%h/\n')
          find "$tesseract" -name "*.h*" -exec cp "{}" tesseract/ \;
          find "storage/pkg/" -wholename "*tesseract/version.h" -exec cp "{}" tesseract/ \;

      - name: Build Windows Plugin
        if: matrix.config.os == 'windows-latest'
        run: |
          cl.exe /Fe${{ matrix.config.output }} /MT /LD /O2 -I. main.cpp exports.cpp user32.lib advapi32.lib libs/*.lib

      - name: Build Linux Plugin
        if: matrix.config.os == 'ubuntu-latest'
        run: | 
          g++ -c -fPIC -I. main.cpp exports.cpp
          g++ -o ${{ matrix.config.output }} -O2 -Wl,--whole-archive libs/*.a -Wl,--no-whole-archive -lpthread -shared main.o

      - uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.config.output }}